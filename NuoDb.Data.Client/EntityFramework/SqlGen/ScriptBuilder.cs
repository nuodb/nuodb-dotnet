/****************************************************************************
*	Author: Jiri Cincura (jiri@cincura.net)
****************************************************************************/

using System;
using System.Collections.Generic;
using System.Data.Metadata.Edm;
using System.Linq;
using System.Text;

namespace NuoDb.Data.Client.EntityFramework.SqlGen
{
	static class ScriptBuilder
	{
		public static string GenerateDatabaseScript(string providerManifestToken, StoreItemCollection storeItemCollection)
		{
			if (storeItemCollection == null)
				return string.Empty;

			var result = new StringBuilder();
			result.Append(string.Join(Environment.NewLine, GenerateTables(storeItemCollection)));
			result.AppendLine();
			result.Append(string.Join(Environment.NewLine, GenerateForeignKeys(storeItemCollection)));
			result.AppendLine();
			return result.ToString();
		}

		static IEnumerable<string> GenerateTables(StoreItemCollection storeItems)
		{
			foreach (var entitySet in storeItems.GetItems<EntityContainer>()[0].BaseEntitySets.OfType<EntitySet>())
			{
				var result = new StringBuilder();
				var tableName = MetadataHelpers.GetTableName(entitySet);
				result.AppendFormat("CREATE TABLE {0} (", SqlGenerator.QuoteIdentifier(tableName));
				result.AppendLine();
				result.Append("\t");
				result.Append(string.Join("," + Environment.NewLine + "\t", MetadataHelpers.GetProperties(entitySet.ElementType).Select(p => GenerateColumn(p))));
				result.AppendLine();
				result.Append(");");
				result.AppendLine();
				result.AppendFormat("ALTER TABLE {0} ADD PRIMARY KEY ({1});",
					SqlGenerator.QuoteIdentifier(tableName),
					string.Join(", ", entitySet.ElementType.KeyMembers.Select(pk => SqlGenerator.QuoteIdentifier(pk.Name))));
				result.AppendLine();
				yield return result.ToString();
			}
		}

		static IEnumerable<string> GenerateForeignKeys(StoreItemCollection storeItems)
		{
			foreach (var associationSet in storeItems.GetItems<EntityContainer>()[0].BaseEntitySets.OfType<AssociationSet>())
			{
				var result = new StringBuilder();
				ReferentialConstraint constraint = associationSet.ElementType.ReferentialConstraints.Single<ReferentialConstraint>();
				AssociationSetEnd end = associationSet.AssociationSetEnds[constraint.FromRole.Name];
				AssociationSetEnd end2 = associationSet.AssociationSetEnds[constraint.ToRole.Name];
				result.AppendFormat("ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}) ON DELETE {4};",
					SqlGenerator.QuoteIdentifier(MetadataHelpers.GetTableName(end2.EntitySet)),
					string.Join(", ", constraint.ToProperties.Select(fk => SqlGenerator.QuoteIdentifier(fk.Name))),
					SqlGenerator.QuoteIdentifier(MetadataHelpers.GetTableName(end.EntitySet)),
					string.Join(", ", constraint.FromProperties.Select(pk => SqlGenerator.QuoteIdentifier(pk.Name))),
					end.CorrespondingAssociationEndMember.DeleteBehavior == OperationAction.Cascade ? "CASCADE" : "NO ACTION");
				yield return result.ToString();
			}
		}

		static string GenerateColumn(EdmProperty property)
		{
			var column = new StringBuilder();
			column.Append(SqlGenerator.QuoteIdentifier(property.Name));
			column.Append(" ");
			column.Append(SqlGenerator.GetSqlPrimitiveType(property.TypeUsage));
			if (MetadataHelpers.IsStoreGeneratedIdentity(property))
			{
				column.Append(" GENERATED BY DEFAULT AS IDENTITY");
			}
			if (!property.Nullable)
			{
				column.Append(" NOT NULL");
			}
			return column.ToString();
		}
	}
}
