/****************************************************************************
*  Author: Jiri Cincura (jiri@cincura.net)
****************************************************************************/

#if !__MonoCS__

using System;
using System.Collections.Generic;
#if EF6
using System.Data.Entity.Core.Metadata.Edm;
#else
using System.Data.Metadata.Edm;
#endif
using System.Linq;
using System.Text;

#if EF6
namespace NuoDb.Data.Client.EntityFramework6.SqlGen
#else
namespace NuoDb.Data.Client.EntityFramework.SqlGen
#endif
{
    static class ScriptBuilder
    {
        public static string GenerateDatabaseScript(string providerManifestToken, StoreItemCollection storeItemCollection)
        {
            if (storeItemCollection == null)
                return string.Empty;

            var result = new StringBuilder();
            result.Append(string.Join(Environment.NewLine, GenerateTables(storeItemCollection)));
            result.AppendLine();
            result.Append(string.Join(Environment.NewLine, GenerateForeignKeys(storeItemCollection)));
            result.AppendLine();
            return result.ToString();
        }

        static IEnumerable<string> GenerateTables(StoreItemCollection storeItems)
        {
            foreach (var entitySet in storeItems.GetItems<EntityContainer>()[0].BaseEntitySets.OfType<EntitySet>())
            {
                var result = new StringBuilder();
                var tableName = MetadataHelpers.GetTableName(entitySet);
                var schemaName = MetadataHelpers.GetSchemaName(entitySet);
                result.AppendFormat("CREATE TABLE {0}.{1} (", SqlGenerator.QuoteIdentifier(schemaName), SqlGenerator.QuoteIdentifier(tableName));
                result.AppendLine();
                result.Append("\t");
                result.Append(string.Join("," + Environment.NewLine + "\t", MetadataHelpers.GetProperties(entitySet.ElementType).Select(p => GenerateColumn(p))));
                result.Append(");");
                result.AppendLine();
                result.AppendFormat("ALTER TABLE {0}.{1} ADD PRIMARY KEY ({2});",
                    SqlGenerator.QuoteIdentifier(schemaName),
                    SqlGenerator.QuoteIdentifier(tableName),
                    string.Join(", ", entitySet.ElementType.KeyMembers.Select(pk => SqlGenerator.QuoteIdentifier(pk.Name))));
                result.AppendLine();
                yield return result.ToString();
            }
        }

        static IEnumerable<string> GenerateForeignKeys(StoreItemCollection storeItems)
        {
            foreach (var associationSet in storeItems.GetItems<EntityContainer>()[0].BaseEntitySets.OfType<AssociationSet>())
            {
                var result = new StringBuilder();
                ReferentialConstraint constraint = associationSet.ElementType.ReferentialConstraints.Single<ReferentialConstraint>();
                AssociationSetEnd end = associationSet.AssociationSetEnds[constraint.FromRole.Name];
                AssociationSetEnd end2 = associationSet.AssociationSetEnds[constraint.ToRole.Name];
                result.AppendFormat("ALTER TABLE {0}.{1} ADD FOREIGN KEY ({2}) REFERENCES {3}.{4}({5}){6};",
                    SqlGenerator.QuoteIdentifier(MetadataHelpers.GetSchemaName(end2.EntitySet)), 
                    SqlGenerator.QuoteIdentifier(MetadataHelpers.GetTableName(end2.EntitySet)),
                    string.Join(", ", constraint.ToProperties.Select(fk => SqlGenerator.QuoteIdentifier(fk.Name))),
                    SqlGenerator.QuoteIdentifier(MetadataHelpers.GetSchemaName(end.EntitySet)),
                    SqlGenerator.QuoteIdentifier(MetadataHelpers.GetTableName(end.EntitySet)),
                    string.Join(", ", constraint.FromProperties.Select(pk => SqlGenerator.QuoteIdentifier(pk.Name))),
                    end.CorrespondingAssociationEndMember.DeleteBehavior == OperationAction.Cascade ? " ON DELETE CASCADE" : string.Empty);
                yield return result.ToString();
            }
        }

        static string GenerateColumn(EdmProperty property)
        {
            var column = new StringBuilder();
            column.Append(SqlGenerator.QuoteIdentifier(property.Name));
            column.Append(" ");
            column.Append(SqlGenerator.GetSqlPrimitiveType(property.TypeUsage));
            if (MetadataHelpers.IsStoreGeneratedIdentity(property))
            {
                column.Append(" GENERATED BY DEFAULT AS IDENTITY");
            }
            if (!property.Nullable)
            {
                column.Append(" NOT NULL");
            }
            return column.ToString();
        }
    }
}

#endif